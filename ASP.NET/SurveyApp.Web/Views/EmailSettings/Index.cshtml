@model SurveyApp.Web.Models.EmailSettingsViewModel
@{
    ViewData["Title"] = "Configuración de Email";
}

<div class="container mx-auto px-4 mt-8">
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-2xl font-bold">Configuración de Email</h1>
        <a href="@Url.Action("Index", "Surveys")" class="btn-secondary">
            <i class="fas fa-arrow-left mr-2"></i> Volver
        </a>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div class="bg-white rounded-lg shadow p-6">
            <h2 class="text-xl font-semibold mb-4">Encuestas</h2>
            
            <div class="mb-4">
                <select id="surveySelector" class="form-select w-full">
                    <option value="">Configuración global</option>
                    @foreach (var survey in Model.Surveys)
                    {
                        <option value="@survey.Id" data-has-config="@survey.HasCustomDeliveryConfig.ToString().ToLower()">
                            @survey.Title @(survey.HasCustomDeliveryConfig ? "[Personalizada]" : "")
                        </option>
                    }
                </select>
            </div>
            
            <div class="max-h-[400px] overflow-y-auto">
                <table class="min-w-full">
                    <thead>
                        <tr>
                            <th class="text-left py-2">Título</th>
                            <th class="text-left py-2">Fecha</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr class="border-t">
                            <td class="py-2">Configuración global</td>
                            <td>-</td>
                            <td class="text-right">
                                <button type="button" class="btn-select-survey" data-id="">
                                    Seleccionar
                                </button>
                            </td>
                        </tr>
                        @foreach (var survey in Model.Surveys)
                        {
                            <tr class="border-t">
                                <td class="py-2">
                                    @survey.Title
                                    @if (survey.HasCustomDeliveryConfig)
                                    {
                                        <span class="text-xs bg-gray-200 text-gray-800 px-2 py-1 rounded ml-2">Personalizada</span>
                                    }
                                </td>
                                <td>@survey.CreatedAt.ToString("dd/MM/yyyy")</td>
                                <td class="text-right">
                                    <button type="button" class="btn-select-survey" data-id="@survey.Id">
                                        Seleccionar
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        
        <div class="bg-white rounded-lg shadow p-6 lg:col-span-2">
            <h2 class="text-xl font-semibold mb-4">
                <span id="configTitle">Configuración global de email</span>
            </h2>
            <p id="surveyName" class="text-sm text-gray-600 mb-4 hidden"></p>
            
            <div class="mb-4">
                <div class="flex flex-wrap gap-2 mb-4">
                    <button type="button" id="testConnection" class="btn-secondary flex items-center">
                        <i class="fas fa-plug mr-2"></i> Probar conexión SMTP
                    </button>
                    
                    <button type="button" id="checkEmails" class="btn-secondary flex items-center">
                        <i class="fas fa-inbox mr-2"></i> Verificar correos
                    </button>
                    
                    <button type="button" id="sendTestEmail" class="btn-secondary flex items-center">
                        <i class="fas fa-paper-plane mr-2"></i> Enviar correo de prueba
                    </button>
                </div>
                
                <div id="connectionResult" class="mt-2 hidden"></div>
                <div id="emailCheckResult" class="mt-2 hidden"></div>
                
                <div id="testEmailForm" class="mt-4 hidden">
                    <div class="flex">
                        <input type="email" id="testEmailAddress" class="form-input flex-grow" placeholder="Dirección de correo para prueba">
                        <button type="button" id="confirmSendTestEmail" class="btn-primary ml-2">Enviar</button>
                    </div>
                    <div id="testEmailResult" class="mt-2 hidden"></div>
                </div>
            </div>
            
            <div id="configForm">
                <div class="mb-4">
                    <label class="block text-sm font-medium mb-1">Tipo de entrega</label>
                    <div class="flex space-x-4">
                        <label class="inline-flex items-center">
                            <input type="radio" name="deliveryType" value="manual" checked class="form-radio">
                            <span class="ml-2">Manual</span>
                        </label>
                        <label class="inline-flex items-center">
                            <input type="radio" name="deliveryType" value="scheduled" class="form-radio">
                            <span class="ml-2">Programada</span>
                        </label>
                        <label class="inline-flex items-center">
                            <input type="radio" name="deliveryType" value="triggered" class="form-radio">
                            <span class="ml-2">Por eventos</span>
                        </label>
                    </div>
                </div>
                
                <div class="mb-4">
                    <label class="block text-sm font-medium mb-1">Destinatarios</label>
                    <div class="flex mb-2">
                        <input type="email" id="newEmail" class="form-input flex-grow" placeholder="Agregar email...">
                        <button type="button" id="addEmail" class="btn-primary ml-2">Agregar</button>
                    </div>
                    <div class="flex mb-2">
                        <input type="text" id="customerSearch" class="form-input flex-grow" placeholder="Buscar cliente...">
                        <button type="button" id="searchCustomers" class="btn-secondary ml-2">Buscar</button>
                    </div>
                    <div id="customersResults" class="max-h-[200px] overflow-y-auto hidden border rounded p-2 mb-2"></div>
                    <div id="emailList" class="max-h-[150px] overflow-y-auto p-2 border rounded">
                        <p class="text-gray-500 text-sm italic">No hay destinatarios seleccionados</p>
                    </div>
                </div>
                
                <div id="scheduleSettings" class="mb-4 hidden">
                    <h3 class="font-medium mb-2">Configuración de programación</h3>
                    
                    <div class="mb-3">
                        <label class="block text-sm mb-1">Frecuencia</label>
                        <select id="frequency" class="form-select w-full">
                            <option value="daily">Diaria</option>
                            <option value="weekly">Semanal</option>
                            <option value="monthly">Mensual</option>
                        </select>
                    </div>
                    
                    <div class="mb-3" id="dayOfWeekContainer">
                        <label class="block text-sm mb-1">Día de la semana</label>
                        <select id="dayOfWeek" class="form-select w-full">
                            <option value="1">Lunes</option>
                            <option value="2">Martes</option>
                            <option value="3">Miércoles</option>
                            <option value="4">Jueves</option>
                            <option value="5">Viernes</option>
                            <option value="6">Sábado</option>
                            <option value="0">Domingo</option>
                        </select>
                    </div>
                    
                    <div class="mb-3" id="dayOfMonthContainer" style="display:none;">
                        <label class="block text-sm mb-1">Día del mes</label>
                        <select id="dayOfMonth" class="form-select w-full">
                            @for (int i = 1; i <= 31; i++)
                            {
                                <option value="@i">@i</option>
                            }
                        </select>
                    </div>
                    
                    <div class="mb-3">
                        <label class="block text-sm mb-1">Hora</label>
                        <input type="time" id="scheduleTime" class="form-input" value="09:00">
                    </div>
                    
                    <div class="mb-3">
                        <label class="block text-sm mb-1">Fecha de inicio</label>
                        <input type="date" id="startDate" class="form-input" value="@DateTime.Today.ToString("yyyy-MM-dd")">
                    </div>
                </div>
                
                <div id="triggerSettings" class="mb-4 hidden">
                    <h3 class="font-medium mb-2">Configuración de eventos</h3>
                    
                    <div class="mb-3">
                        <label class="block text-sm mb-1">Tipo de evento</label>
                        <select id="triggerType" class="form-select w-full">
                            <option value="ticket-closed">Ticket cerrado</option>
                            <option value="purchase-completed">Compra completada</option>
                        </select>
                    </div>
                    
                    <div class="mb-3">
                        <label class="block text-sm mb-1">Retraso (horas)</label>
                        <input type="number" id="delayHours" class="form-input" value="24" min="0">
                    </div>
                    
                    <div class="mb-3">
                        <label class="inline-flex items-center">
                            <input type="checkbox" id="sendAutomatically" class="form-checkbox" checked>
                            <span class="ml-2">Enviar automáticamente</span>
                        </label>
                    </div>
                </div>
                
                <div class="flex justify-between mt-6">
                    <button type="button" id="saveConfig" class="btn-primary">
                        <i class="fas fa-save mr-2"></i> Guardar configuración
                    </button>
                    
                    <div id="actionButtons" class="hidden">
                        <button type="button" id="sendEmails" class="btn-success">
                            <i class="fas fa-paper-plane mr-2"></i> Enviar ahora
                        </button>
                        <button type="button" id="scheduleEmails" class="btn-info ml-2 hidden">
                            <i class="fas fa-calendar-alt mr-2"></i> Programar envío
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div id="receivedEmails" class="mt-6 bg-white rounded-lg shadow p-6 hidden">
        <h2 class="text-xl font-semibold mb-4">
            Correos Recibidos
            <span class="text-sm font-normal text-gray-500">(últimos 10 mensajes)</span>
        </h2>
        
        <div id="emailList" class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead>
                    <tr>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Remitente</th>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Asunto</th>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Fecha</th>
                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Adjuntos</th>
                    </tr>
                </thead>
                <tbody id="emailsTableBody" class="bg-white divide-y divide-gray-200">
                    <!-- Los correos se cargarán dinámicamente aquí -->
                </tbody>
            </table>
        </div>
        
        <div id="noEmailsMessage" class="text-center py-4 text-gray-500">
            No se han encontrado correos.
        </div>
    </div>
</div>

<div id="confirmationModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden z-50">
    <div class="bg-white rounded-lg p-6 max-w-md w-full">
        <h3 class="text-xl font-bold mb-4">Confirmar acción</h3>
        <p id="confirmationMessage" class="mb-6">¿Estás seguro de que deseas continuar?</p>
        <div class="flex justify-end space-x-3">
            <button id="cancelAction" class="btn-secondary">Cancelar</button>
            <button id="confirmAction" class="btn-primary">Confirmar</button>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="~/css/emailSettings.css" />
}

@section Scripts {
    <script>
        $(document).ready(function () {
            let selectedSurveyId = '';
            let emailAddresses = [];
            let currentAction = '';
            let deliveryConfig = @Html.Raw(Json.Serialize(Model.DeliveryConfig));
            
            initFormWithConfig(deliveryConfig);
            
            $('#surveySelector, .btn-select-survey').on('click', function() {
                const surveyId = $(this).is('select') ? $(this).val() : $(this).data('id');
                selectedSurveyId = surveyId;
                
                if (surveyId) {
                    fetch(`/EmailSettings/GetSurveyConfig?surveyId=${surveyId}`)
                        .then(response => response.json())
                        .then(data => {
                            deliveryConfig = data;
                            initFormWithConfig(data);
                            
                            $('#configTitle').text('Configuración específica de encuesta');
                            const surveyName = $(`#surveySelector option[value="${surveyId}"]`).text().replace('[Personalizada]', '').trim();
                            $('#surveyName').text(`Configurando encuesta: ${surveyName}`).show();
                            
                            $('#actionButtons').show();
                        });
                } else {
                    fetch('/EmailSettings/GetSurveyConfig')
                        .then(response => response.json())
                        .then(data => {
                            deliveryConfig = data;
                            initFormWithConfig(data);
                            
                            $('#configTitle').text('Configuración global de email');
                            $('#surveyName').hide();
                            
                            $('#actionButtons').hide();
                        });
                }
            });
            
            $('input[name="deliveryType"]').on('change', function() {
                const type = $(this).val();
                
                $('#scheduleSettings, #triggerSettings').addClass('hidden');
                $('#scheduleEmails').addClass('hidden');
                
                if (type === 'scheduled') {
                    $('#scheduleSettings').removeClass('hidden');
                    $('#scheduleEmails').removeClass('hidden');
                } else if (type === 'triggered') {
                    $('#triggerSettings').removeClass('hidden');
                    $('#scheduleEmails').removeClass('hidden');
                }
            });
            
            $('#frequency').on('change', function() {
                const frequency = $(this).val();
                
                if (frequency === 'daily') {
                    $('#dayOfWeekContainer, #dayOfMonthContainer').hide();
                } else if (frequency === 'weekly') {
                    $('#dayOfWeekContainer').show();
                    $('#dayOfMonthContainer').hide();
                } else if (frequency === 'monthly') {
                    $('#dayOfWeekContainer').hide();
                    $('#dayOfMonthContainer').show();
                }
            });
            
            $('#addEmail').on('click', function() {
                const email = $('#newEmail').val().trim();
                if (email && validateEmail(email) && !emailAddresses.includes(email)) {
                    emailAddresses.push(email);
                    updateEmailList();
                    $('#newEmail').val('');
                } else if (!validateEmail(email)) {
                    alert('Por favor ingrese un email válido');
                } else if (emailAddresses.includes(email)) {
                    alert('Este email ya está en la lista');
                }
            });
            
            $('#searchCustomers').on('click', function() {
                const search = $('#customerSearch').val().trim();
                
                fetch(`/EmailSettings/GetCustomers?search=${encodeURIComponent(search)}`)
                    .then(response => response.json())
                    .then(customers => {
                        const container = $('#customersResults');
                        container.empty();
                        
                        if (customers.length === 0) {
                            container.append('<p class="text-sm text-gray-500 p-2">No se encontraron clientes</p>');
                        } else {
                            customers.forEach(customer => {
                                const item = $(`
                                    <div class="p-2 hover:bg-gray-100 cursor-pointer flex justify-between items-center">
                                        <div>
                                            <div class="font-medium">${customer.name}</div>
                                            <div class="text-sm text-gray-600">${customer.email}</div>
                                        </div>
                                        <button type="button" class="btn-sm btn-primary add-customer-email" 
                                                data-email="${customer.email}">Agregar</button>
                                    </div>
                                `);
                                container.append(item);
                            });
                            
                            $('.add-customer-email').on('click', function() {
                                const email = $(this).data('email');
                                if (email && !emailAddresses.includes(email)) {
                                    emailAddresses.push(email);
                                    updateEmailList();
                                }
                            });
                        }
                        
                        container.removeClass('hidden');
                    });
            });
            
            $('#saveConfig').on('click', function() {
                const config = collectFormData();
                
                if (selectedSurveyId) {
                    fetch(`/EmailSettings/SaveSurveyConfig?surveyId=${selectedSurveyId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(config)
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                showToast('Configuración guardada exitosamente');
                                $(`#surveySelector option[value="${selectedSurveyId}"]`).attr('data-has-config', 'true');
                                if (!$(`#surveySelector option[value="${selectedSurveyId}"]`).text().includes('[Personalizada]')) {
                                    const text = $(`#surveySelector option[value="${selectedSurveyId}"]`).text();
                                    $(`#surveySelector option[value="${selectedSurveyId}"]`).text(`${text} [Personalizada]`);
                                }
                            } else {
                                showToast('Error al guardar la configuración', true);
                            }
                        });
                } else {
                    fetch('/EmailSettings/SaveGlobalConfig', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(config)
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                showToast('Configuración global guardada exitosamente');
                            } else {
                                showToast('Error al guardar la configuración global', true);
                            }
                        });
                }
            });
            
            $('#sendEmails').on('click', function() {
                if (!selectedSurveyId) {
                    showToast('Selecciona una encuesta primero', true);
                    return;
                }
                
                if (emailAddresses.length === 0) {
                    showToast('No hay destinatarios seleccionados', true);
                    return;
                }
                
                $('#confirmationMessage').text(`Se enviarán correos electrónicos a ${emailAddresses.length} destinatarios. ¿Estás seguro de que quieres proceder?`);
                $('#confirmationModal').removeClass('hidden');
                currentAction = 'send';
            });
            
            $('#scheduleEmails').on('click', function() {
                if (!selectedSurveyId) {
                    showToast('Selecciona una encuesta primero', true);
                    return;
                }
                
                if (emailAddresses.length === 0) {
                    showToast('No hay destinatarios seleccionados', true);
                    return;
                }
                
                const type = $('input[name="deliveryType"]:checked').val();
                if (type !== 'scheduled' && type !== 'triggered') {
                    showToast('Selecciona un método de entrega programado o por eventos', true);
                    return;
                }
                
                let message = '';
                if (type === 'scheduled') {
                    const frequency = $('#frequency').val();
                    const time = $('#scheduleTime').val();
                    message = `Se programará el envío de correos a ${emailAddresses.length} destinatarios `;
                    
                    if (frequency === 'daily') message += 'diariamente';
                    else if (frequency === 'weekly') message += 'semanalmente';
                    else message += 'mensualmente';
                    
                    message += ` a las ${time}.`;
                } else {
                    const triggerType = $('#triggerType').val();
                    const delayHours = $('#delayHours').val();
                    
                    message = `Se configurará el envío automático a ${emailAddresses.length} destinatarios `;
                    message += `cuando se produzca el evento "${triggerType === 'ticket-closed' ? 'cierre de ticket' : 'compra completada'}" `;
                    
                    if (delayHours > 0) {
                        message += `con un retraso de ${delayHours} horas.`;
                    } else {
                        message += '.';
                    }
                }
                
                $('#confirmationMessage').html(`${message}<br><br>¿Estás seguro de que quieres programar estos envíos?`);
                $('#confirmationModal').removeClass('hidden');
                currentAction = 'schedule';
            });
            
            $('#confirmAction').on('click', function() {
                $('#confirmationModal').addClass('hidden');
                
                if (currentAction === 'send') {
                    executeSendEmails();
                } else if (currentAction === 'schedule') {
                    executeScheduleEmails();
                }
            });
            
            $('#cancelAction').on('click', function() {
                $('#confirmationModal').addClass('hidden');
            });
            
            $('#testConnection').on('click', function() {
                $(this).prop('disabled', true);
                $(this).html('<i class="fas fa-spinner fa-spin mr-2"></i> Probando...');
                
                fetch('/EmailSettings/TestEmailConnection')
                    .then(response => response.json())
                    .then(data => {
                        const resultEl = $('#connectionResult');
                        resultEl.removeClass('hidden bg-green-100 bg-red-100');
                        
                        if (data.success) {
                            resultEl.addClass('bg-green-100 border-l-4 border-green-500 p-4');
                            resultEl.html(`<div class="flex items-center">
                                <i class="fas fa-check-circle text-green-500 mr-2"></i>
                                <span>${data.message}</span>
                            </div>`);
                        } else {
                            resultEl.addClass('bg-red-100 border-l-4 border-red-500 p-4');
                            resultEl.html(`<div class="flex items-center">
                                <i class="fas fa-exclamation-circle text-red-500 mr-2"></i>
                                <span>${data.message}</span>
                            </div>`);
                        }
                        
                        resultEl.removeClass('hidden');
                    })
                    .catch(error => {
                        $('#connectionResult').removeClass('hidden').addClass('bg-red-100 border-l-4 border-red-500 p-4');
                        $('#connectionResult').html(`<div class="flex items-center">
                            <i class="fas fa-exclamation-circle text-red-500 mr-2"></i>
                            <span>Error al probar la conexión: ${error}</span>
                        </div>`);
                    })
                    .finally(() => {
                        $('#testConnection').prop('disabled', false);
                        $('#testConnection').html('<i class="fas fa-plug mr-2"></i> Probar conexión SMTP');
                    });
            });
            
            $('#checkEmails').on('click', function() {
                $(this).prop('disabled', true);
                $(this).html('<i class="fas fa-spinner fa-spin mr-2"></i> Verificando...');
                
                fetch('/EmailSettings/CheckEmails')
                    .then(response => response.json())
                    .then(data => {
                        const resultEl = $('#emailCheckResult');
                        resultEl.removeClass('hidden bg-green-100 bg-red-100');
                        
                        if (data.success) {
                            resultEl.addClass('bg-green-100 border-l-4 border-green-500 p-4');
                            resultEl.html(`<div class="flex items-center">
                                <i class="fas fa-check-circle text-green-500 mr-2"></i>
                                <span>${data.message}</span>
                            </div>`);
                            
                            if (data.count > 0) {
                                $('#receivedEmails').removeClass('hidden');
                                $('#noEmailsMessage').addClass('hidden');
                                
                                const tableBody = $('#emailsTableBody');
                                tableBody.empty();
                                
                                data.messages.forEach(message => {
                                    const row = $(`
                                        <tr>
                                            <td class="px-4 py-2">${message.from}</td>
                                            <td class="px-4 py-2">${message.subject}</td>
                                            <td class="px-4 py-2">${new Date(message.date).toLocaleString()}</td>
                                            <td class="px-4 py-2">
                                                ${message.hasAttachments ? '<i class="fas fa-paperclip text-gray-500"></i>' : '-'}
                                            </td>
                                        </tr>
                                    `);
                                    tableBody.append(row);
                                });
                            } else {
                                $('#receivedEmails').removeClass('hidden');
                                $('#emailsTableBody').empty();
                                $('#noEmailsMessage').removeClass('hidden');
                            }
                        } else {
                            resultEl.addClass('bg-red-100 border-l-4 border-red-500 p-4');
                            resultEl.html(`<div class="flex items-center">
                                <i class="fas fa-exclamation-circle text-red-500 mr-2"></i>
                                <span>${data.message}</span>
                            </div>`);
                        }
                        
                        resultEl.removeClass('hidden');
                    })
                    .catch(error => {
                        $('#emailCheckResult').removeClass('hidden').addClass('bg-red-100 border-l-4 border-red-500 p-4');
                        $('#emailCheckResult').html(`<div class="flex items-center">
                            <i class="fas fa-exclamation-circle text-red-500 mr-2"></i>
                            <span>Error al verificar correos: ${error}</span>
                        </div>`);
                    })
                    .finally(() => {
                        $('#checkEmails').prop('disabled', false);
                        $('#checkEmails').html('<i class="fas fa-inbox mr-2"></i> Verificar correos');
                    });
            });
            
            $('#sendTestEmail').on('click', function() {
                $('#testEmailForm').toggleClass('hidden');
                if (!$('#testEmailForm').hasClass('hidden')) {
                    $('#testEmailAddress').focus();
                }
            });
            
            $('#confirmSendTestEmail').on('click', function() {
                const email = $('#testEmailAddress').val().trim();
                if (!email || !validateEmail(email)) {
                    showToast('Por favor ingrese un email válido', true);
                    return;
                }
                
                $(this).prop('disabled', true);
                $(this).html('<i class="fas fa-spinner fa-spin mr-2"></i> Enviando...');
                
                fetch(`/EmailSettings/SendTestEmail?email=${encodeURIComponent(email)}`)
                    .then(response => response.json())
                    .then(data => {
                        const resultEl = $('#testEmailResult');
                        resultEl.removeClass('hidden bg-green-100 bg-red-100');
                        
                        if (data.success) {
                            resultEl.addClass('bg-green-100 border-l-4 border-green-500 p-4');
                            resultEl.html(`<div class="flex items-center">
                                <i class="fas fa-check-circle text-green-500 mr-2"></i>
                                <span>${data.message}</span>
                            </div>`);
                            $('#testEmailAddress').val('');
                        } else {
                            resultEl.addClass('bg-red-100 border-l-4 border-red-500 p-4');
                            resultEl.html(`<div class="flex items-center">
                                <i class="fas fa-exclamation-circle text-red-500 mr-2"></i>
                                <span>${data.message}</span>
                            </div>`);
                        }
                        
                        resultEl.removeClass('hidden');
                    })
                    .catch(error => {
                        $('#testEmailResult').removeClass('hidden').addClass('bg-red-100 border-l-4 border-red-500 p-4');
                        $('#testEmailResult').html(`<div class="flex items-center">
                            <i class="fas fa-exclamation-circle text-red-500 mr-2"></i>
                            <span>Error al enviar correo de prueba: ${error}</span>
                        </div>`);
                    })
                    .finally(() => {
                        $('#confirmSendTestEmail').prop('disabled', false);
                        $('#confirmSendTestEmail').html('Enviar');
                    });
            });
            
            function initFormWithConfig(config) {
                $(`input[name="deliveryType"][value="${config.type}"]`).prop('checked', true).trigger('change');
                emailAddresses = config.emailAddresses || [];
                updateEmailList();
                
                if (config.schedule) {
                    $('#frequency').val(config.schedule.frequency).trigger('change');
                    $('#dayOfWeek').val(config.schedule.dayOfWeek || 1);
                    $('#dayOfMonth').val(config.schedule.dayOfMonth || 1);
                    $('#scheduleTime').val(config.schedule.time || '09:00');
                    
                    if (config.schedule.startDate) {
                        $('#startDate').val(config.schedule.startDate.substring(0, 10));
                    }
                }
                
                if (config.trigger) {
                    $('#triggerType').val(config.trigger.type);
                    $('#delayHours').val(config.trigger.delayHours);
                    $('#sendAutomatically').prop('checked', config.trigger.sendAutomatically);
                }
            }
            
            function collectFormData() {
                const type = $('input[name="deliveryType"]:checked').val();
                
                const config = {
                    type: type,
                    emailAddresses: emailAddresses
                };
                
                if (type === 'scheduled') {
                    config.schedule = {
                        frequency: $('#frequency').val(),
                        time: $('#scheduleTime').val(),
                        startDate: $('#startDate').val()
                    };
                    
                    if (config.schedule.frequency === 'weekly') {
                        config.schedule.dayOfWeek = parseInt($('#dayOfWeek').val());
                    } else if (config.schedule.frequency === 'monthly') {
                        config.schedule.dayOfMonth = parseInt($('#dayOfMonth').val());
                    }
                } else if (type === 'triggered') {
                    config.trigger = {
                        type: $('#triggerType').val(),
                        delayHours: parseInt($('#delayHours').val()),
                        sendAutomatically: $('#sendAutomatically').is(':checked')
                    };
                }
                
                return config;
            }
            
            function updateEmailList() {
                const container = $('#emailList');
                container.empty();
                
                if (emailAddresses.length === 0) {
                    container.append('<p class="text-gray-500 text-sm italic">No hay destinatarios seleccionados</p>');
                    return;
                }
                
                emailAddresses.forEach(email => {
                    const item = $(`
                        <div class="flex justify-between items-center p-1 hover:bg-gray-100">
                            <span>${email}</span>
                            <button type="button" class="text-red-600 hover:text-red-800 remove-email" 
                                    data-email="${email}">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    `);
                    container.append(item);
                });
                
                $('.remove-email').on('click', function() {
                    const email = $(this).data('email');
                    emailAddresses = emailAddresses.filter(e => e !== email);
                    updateEmailList();
                });
            }
            
            function executeSendEmails() {
                fetch(`/EmailSettings/SendSurveyEmails?surveyId=${selectedSurveyId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(emailAddresses)
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showToast(data.message);
                        } else {
                            showToast(data.message, true);
                        }
                    })
                    .catch(error => {
                        showToast('Error al enviar los correos: ' + error, true);
                    });
            }
            
            function executeScheduleEmails() {
                const config = collectFormData();
                
                fetch(`/EmailSettings/SaveSurveyConfig?surveyId=${selectedSurveyId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(config)
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showToast('Programación de emails configurada exitosamente');
                            $(`#surveySelector option[value="${selectedSurveyId}"]`).attr('data-has-config', 'true');
                        } else {
                            showToast('Error al configurar la programación de emails', true);
                        }
                    });
            }
            
            function validateEmail(email) {
                const re = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
                return re.test(email);
            }
            
            function showToast(message, isError = false) {
                const toast = $(`
                    <div class="fixed bottom-4 right-4 bg-white shadow-lg rounded-lg p-4 mb-4 ${isError ? 'border-l-4 border-red-500' : 'border-l-4 border-green-500'} max-w-md">
                        <div class="flex items-center">
                            <div class="flex-shrink-0">
                                <i class="fas ${isError ? 'fa-exclamation-circle text-red-500' : 'fa-check-circle text-green-500'}"></i>
                            </div>
                            <div class="ml-3">
                                <p class="text-sm font-medium text-gray-900">${message}</p>
                            </div>
                            <div class="ml-auto pl-3">
                                <div class="-mx-1.5 -my-1.5">
                                    <button class="close-toast inline-flex bg-white rounded-md p-1.5 text-gray-400 hover:text-gray-500">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `);
                
                $('body').append(toast);
                
                setTimeout(() => {
                    toast.fadeOut(300, function() { $(this).remove(); });
                }, 5000);
                
                toast.find('.close-toast').on('click', function() {
                    toast.fadeOut(300, function() { $(this).remove(); });
                });
            }
        });
    </script>
}
