
@model Tuple<SurveyApp.Web.Models.QuestionViewModel, int, int>

@{
    var question = Model.Item1;
    var index = Model.Item2;
    var total = Model.Item3;
    var isFirst = index == 0;
    var isLast = index == total - 1;
    var typeInfo = GetQuestionTypeInfo(question.Type);
}

<div class="question-card" data-index="@index">
    <input type="hidden" name="Questions[@index].Id" value="@question.Id" />
    <input type="hidden" name="Questions[@index].Type" value="@question.Type" />
    <input type="hidden" name="Questions[@index].Required" value="@question.Required.ToString().ToLower()" />
    
    <div class="flex items-center px-4 py-3 border-b bg-muted/30">
        <div class="mr-2 text-muted-foreground cursor-grab draggable-handle">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="9" cy="12" r="1"/><circle cx="9" cy="5" r="1"/><circle cx="9" cy="19" r="1"/><circle cx="15" cy="12" r="1"/><circle cx="15" cy="5" r="1"/><circle cx="15" cy="19" r="1"/></svg>
        </div>
        <button type="button" class="toggle-question-btn p-0 h-auto mr-2" aria-label="Toggle question">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="chevron-icon"><polyline points="18 15 12 9 6 15"></polyline></svg>
        </button>
        <div class="flex-1 font-medium truncate question-title-preview">@(string.IsNullOrEmpty(question.Text) ? "Untitled Question" : question.Text)</div>
        <div class="flex items-center gap-1">
            <button type="button" class="move-up-btn px-2 py-2 rounded-md hover:bg-gray-100 @(isFirst ? "opacity-50" : "")" @(isFirst ? "disabled" : "")>
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="18 15 12 9 6 15"></polyline></svg>
            </button>
            <button type="button" class="move-down-btn px-2 py-2 rounded-md hover:bg-gray-100 @(isLast ? "opacity-50" : "")" @(isLast ? "disabled" : "")>
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="6 9 12 15 18 9"></polyline></svg>
            </button>
            <button type="button" class="delete-question-btn px-2 py-2 rounded-md hover:bg-gray-100 text-muted-foreground hover:text-destructive" aria-label="Delete question">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path><line x1="10" y1="11" x2="10" y2="17"></line><line x1="14" y1="11" x2="14" y2="17"></line></svg>
            </button>
        </div>
    </div>

    <div class="question-content p-4 space-y-4 animate-fade-in">
        <div class="space-y-2">
            <div>
                <label class="block text-sm font-medium mb-1">Question</label>
                <input type="text" name="Questions[@index].Text" class="question-title-input w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent" placeholder="Enter your question" value="@question.Text" />
            </div>
            
            <div>
                <label class="block text-sm font-medium mb-1">Description (optional)</label>
                <textarea name="Questions[@index].Description" class="w-full min-h-[80px] px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent" placeholder="Add a description to provide more context">@question.Description</textarea>
            </div>
        </div>

        <div>
            <button type="button" class="question-type-toggle w-full px-4 py-2 bg-white border border-gray-300 rounded-md text-left flex items-center justify-between">
                <span>Question Type: <span class="font-medium question-type-name">@typeInfo.Name</span></span>
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="question-type-chevron"><polyline points="6 9 12 15 18 9"></polyline></svg>
            </button>
            
            <div class="question-types-dropdown mt-3 p-3 border rounded-md hidden question-type-grid">
                <!-- Filled dynamically with JavaScript -->
            </div>
        </div>

        <div class="question-options-container space-y-3 mt-4 @(IsOptionsBasedType(question.Type) ? "" : "hidden")">
            <label class="block text-sm font-medium mb-1">Options</label>
            <div class="options-list">
                @if (question.Options != null)
                {
                    @for (var i = 0; i < question.Options.Count; i++)
                    {
                        <div class="option-item flex items-center gap-2 mb-2">
                            <input type="text" name="Questions[@index].Options[@i]" class="option-input flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent" value="@question.Options[i]" />
                            <button type="button" class="remove-option-btn px-2 py-2 rounded-md hover:bg-gray-100 text-muted-foreground hover:text-destructive" @(question.Options.Count <= 2 ? "disabled" : "")>
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path></svg>
                            </button>
                        </div>
                    }
                }
            </div>
            <button type="button" class="add-option-btn">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>
                Add Option
            </button>
        </div>

        <div class="question-preview-container mt-4 border rounded-md p-4 bg-muted/20 @(NeedsPreview(question.Type) ? "" : "hidden")">
            <label class="mb-2 block text-sm font-medium">Preview</label>
            <div class="preview-content">
                @if (question.Type == "rating")
                {
                    <div class="star-rating">
                        <div class="flex justify-between w-full">
                            @for (int i = 1; i <= 5; i++)
                            {
                                <div class="star-rating-option">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-gray-300">
                                        <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"></polygon>
                                    </svg>
                                </div>
                            }
                        </div>
                        <div class="star-labels mt-2">
                            <span>Poor</span>
                            <span></span>
                            <span>Average</span>
                            <span></span>
                            <span>Excellent</span>
                        </div>
                    </div>
                }
                else if (question.Type == "nps")
                {
                    <div>
                        <div class="nps-grid">
                            @for (int i = 0; i <= 10; i++)
                            {
                                <div class="nps-label">@i</div>
                            }
                        </div>
                        <div class="nps-labels">
                            <span>Not at all likely</span>
                            <span>Very likely</span>
                        </div>
                    </div>
                }
            </div>
        </div>

        <div class="flex items-center space-x-2 pt-2">
            <input type="checkbox" id="question-@question.Id-required" class="question-required-checkbox" @(question.Required ? "checked" : "") />
            <label for="question-@question.Id-required" class="text-sm">Required question</label>
        </div>
    </div>
</div>

@functions {
    private bool IsOptionsBasedType(string type)
    {
        return new[] { "multiple-choice", "single-choice", "dropdown", "ranking" }.Contains(type);
    }
    
    private bool NeedsPreview(string type)
    {
        return new[] { "rating", "nps" }.Contains(type);
    }
    
    private dynamic GetQuestionTypeInfo(string type)
    {
        var types = new Dictionary<string, dynamic> {
            { "text", new { Name = "Text Input", Description = "Collect open-ended responses" } },
            { "multiple-choice", new { Name = "Multiple Choice", Description = "Allow multiple selections" } },
            { "single-choice", new { Name = "Single Choice", Description = "Allow only one selection" } },
            { "rating", new { Name = "Rating Scale", Description = "Collect ratings on a scale" } },
            { "dropdown", new { Name = "Dropdown", Description = "Selection from a dropdown" } },
            { "matrix", new { Name = "Matrix", Description = "Grid-based responses" } },
            { "ranking", new { Name = "Ranking", Description = "Order items by preference" } },
            { "nps", new { Name = "Net Promoter Score", Description = "Measure satisfaction" } },
            { "date", new { Name = "Date", Description = "Collect date information" } },
            { "file-upload", new { Name = "File Upload", Description = "Allow file uploads" } }
        };
        
        return types.ContainsKey(type) ? types[type] : types["text"];
    }
}
